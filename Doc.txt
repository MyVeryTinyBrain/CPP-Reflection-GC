* 준비
CodeGenerator.exe, CodeGenerator.dll, CodeGenerator.runtimeconfig 파일을 프로젝트 폴더에 위치시킵니다.
CodeGenerator.exe 파일을 실행합니다.
Reflection/_reflection_source_.reflection.cpp 파일을 프로젝트에 포함합니다
프로젝트의 빌드 전 이벤트에서 CodeGenerator.exe를 실행하도록 합니다.
CodeGenerator.exe가 위치한 곳에서부터 헤더파일 탐색을 시작합니다.
CodeGenerator.exe가 위치한 곳의 Reflection 디렉터리에 생성된 파일이 추가됩니다.

* 시작 명령어
시작 명령어의 문자열은 대소문자를 구분하지 않습니다.
명령어 구문은 '-명령어(띄어쓰기)값' 입니다.

-Directory directory
해당 경로부터 탐색을 시작합니다.
해당 경로에 Reflection 디렉터리를 생성하고 그 디렉터리에 리플렉션 파일이 생성됩니다.
기본값은 프로그램이 위치한 디렉터리입니다.

-LastWriteTimeCheck 0|1
0: 마지막으로 수정한 시간 검사를 하지 않습니다.
1: 헤더 파일과 리플렉션 헤더 파일의 마지막으로 수정한 시간이 같으면 변경 사항이 없다고 판단하여 리플렉션 헤더 파일을 생성하지 않습니다.
기본값은 1입니다.

-ObjectCheck 0|1
0: 헤더 파일에 리플렉션 정보를 생성할 오브젝트가 정의되어 있지 않아도 리플렉션 헤더 파일을 생성합니다.
1: 헤더 파일에 리플렉션 정보를 생성할 오브젝트가 정의되어 있지 않으면 리플렉션 헤더 파일을 생성하지 않습니다.
기본값은 1입니다.

-Log 0|1
0: 콘솔에 아무것도 표시하지 않습니다.
1: 진행 상황 및 결과를 콘솔에 표시합니다.
기본값은 1입니다.

* 주의사항
.reflection.h 파일은 가장 마지막에 include 해야 합니다.

오브젝트 타입은 헤더 파일에만 선언해야 합니다.

리플렉션 타입을 선언할 때 템플릿 타입으로 제작하지 마세요.
지원하지 않습니다.

여러 클래스를 상속 받는 경우에는 첫 번째로 관리되는 클래스를 기입해야 합니다.

클래스는 반드시 CObject 혹은 CObject를 상속받는 클래스를 상속받아야 합니다.

new 연산자를 오버로딩 하지 마세요.
new 연산자는 가비지 콜렉터에 인스턴스를 등록합니다.

구조체는 동적 생성이 불가능합니다.

가비지 콜렉터는 리플렉션 처리된 구조체, 1차 포인터 타입의 리플렉션 처리된 클래스 타입인 멤버 변수만 수집합니다.

논 포인터 타입의 클래스 멤버를 선언하지 마세요.
의도되지 않은 동작이 발생할 수 있습니다.

컨테이너에 리플렉션 처리된 타입을 담고 수집하기 위해서는 TList, TSet, TMap 타입만을 사용해야 합니다.
배열을 포함한 이외의 타입은 인식할 수 없습니다.

컨테이너 내부에 다시 컨테이너를 담지 마세요.
2차원 배열 혹은 컨테이너 내부에 컨테이너를 담아야 할 경우에는 구조체 또는 클래스를 선언하여 내부에 담은 후 그 타입을 다시 컨테이너에 담아야 합니다.
불가능
CVector<CVector<CObject*>> ObjectVectors;
가능
struct SVectorWrapper
{
	CVector<CObject*> Vector;
}
CVector<SVectorWrapper> ObjectVectors;

루트 오브젝트를 제거해야 할 때
수동으로 제거하려면 제거 전에 루트 오브젝트 등록을 해지해야 합니다.
모두 제거하고 가비지 콜렉션을 실행하려면 DeleteAllRootObjects() 함수를 호출합니다.